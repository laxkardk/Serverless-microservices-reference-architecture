# This workflow will build a Node.js project and deploy it to an Azure Functions App on Windows or Linux when a commit is pushed to your default branch.
#
# This workflow assumes you have already created the target Azure Functions app.
# For instructions see:
#   - https://learn.microsoft.com/en-us/azure/azure-functions/create-first-function-vs-code-node
#   - https://learn.microsoft.com/en-us/azure/azure-functions/create-first-function-vs-code-typescript
#
# To configure this workflow:
# 1. Set up the following secrets in your repository:
#   - AZURE_FUNCTIONAPP_PUBLISH_PROFILE
# 2. Change env variables for your configuration.
#
# For more information on:
#   - GitHub Actions for Azure: https://github.com/Azure/Actions
#   - Azure Functions Action: https://github.com/Azure/functions-action
#   - Publish Profile: https://github.com/Azure/functions-action#using-publish-profile-as-deployment-credential-recommended
#   - Azure Service Principal for RBAC: https://github.com/Azure/functions-action#using-azure-service-principal-for-rbac-as-deployment-credential
#
# For more samples to get started with GitHub Action workflows to deploy to Azure: https://github.com/Azure/actions-workflow-samples/tree/master/FunctionApp

name: Build and deploy Trip Archiver Function App

on:
  push:
    branches: 
      - '*'
    paths: [ 'nodejs/**' ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

env:
  AZURE_FUNCTIONAPP_NAME: TripShareTripArchiverFunctionApp   # set this to your function app name on Azure
  AZURE_FUNCTIONAPP_PACKAGE_PATH: .\nodejs\serverless-microservices-functionapp-triparchiver\published       # set this to the path to your function app project, defaults to the repository root
  NODE_VERSION: '20.x'                      # set this to the node version to use (e.g. '8.x', '10.x', '12.x')

jobs:
  build-and-deploy:
    runs-on: windows-latest # For Linux, use ubuntu-latest
    environment: dev
    steps:
    - name: 'Checkout GitHub Action'
      uses: actions/checkout@v4

    # If you want to use Azure RBAC instead of Publish Profile, then uncomment the task below
    # - name: 'Login via Azure CLI'
    #   uses: azure/login@v1
    #   with:
    #     creds: ${{ secrets.AZURE_RBAC_CREDENTIALS }} # set up AZURE_RBAC_CREDENTIALS secrets in your repository

    - name: Setup Node ${{ env.NODE_VERSION }} Environment
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: ./nodejs/serverless-microservices-functionapp-triparchiver

    - name: 'Resolve Project Dependencies Using Npm'
      shell: pwsh # For Linux, use bash
      run: |
        pushd './${{ env.AZURE_FUNCTIONAPP_PACKAGE_PATH }}'
        npm install
        npm run build --if-present
        npm run test --if-present
        npm run pack
        popd

    - name: 'Run Azure Functions Action'
      uses: Azure/functions-action@v1
      id: fa
      with:
        app-name: ${{ env.AZURE_FUNCTIONAPP_NAME }}
        package: ${{ env.AZURE_FUNCTIONAPP_PACKAGE_PATH }}
        publish-profile: ${{ secrets.TripShareTripArchiverFunctionApp_29TD }} # Remove publish-profile to use Azure RBAC
  arm64_job:
      name: Build and Test for arm64
      runs-on: ubuntu-20.04
      steps:
        - uses: actions/checkout@v2
        - name: Set up QEMU
          id: qemu
          uses: docker/setup-qemu-action@v1
        - name: Install and Run tests
          run: |
            docker run --rm -v ${{ github.workspace }}:/ws:rw --workdir=/ws \
              arm64v8/ubuntu:20.04 \
              bash -exc 'apt-get update && \
              apt install sudo -y && \
              sudo apt clean && \
              sudo apt update && \
              sudo apt install --fix-missing && \
              sudo apt update --fix-missing && \
              sudo apt install curl -y && \
              curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.1/install.sh | bash  && \
              export NVM_DIR="$([ -z "${XDG_CONFIG_HOME-}" ] && printf %s "${HOME}/.nvm" ||
              printf %s "${XDG_CONFIG_HOME}/nvm")" && \
              [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh" && \
              nvm install node && \
              node --version  && \
              npm --version && \
              cd nodejs/serverless-microservices-functionapp-triparchiver && \
              npm install && \
              npm run pack'
